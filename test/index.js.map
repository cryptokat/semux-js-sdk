{"version":3,"file":"index.js","sources":["../lib/Hash.spec.ts","../lib/Key.spec.ts","../lib/SimpleDecoder.spec.ts","../lib/SimpleEncoder.spec.ts","../lib/Transaction.spec.ts"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport chai from \"chai\";\nimport Hash from \"./Hash\";\n\ndescribe(\"Hash\", () => {\n  const msg = \"test\";\n  const msgBlake2b = \"928b20366943e2afd11ebc0eae2e53a93bf177a4fcf35bcc64d503704e65e202\";\n  const msgH160 = \"86e8402b7615f07a2acb2ef1f4a54d323bbede77\";\n\n  it(\"h256('') = '0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8'\", () => {\n    const hash = Hash.h256(new Uint8Array(0));\n    chai.assert.strictEqual(\n      Buffer.from(hash.buffer).toString(\"hex\"),\n      \"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8\",\n    );\n  });\n\n  it(\"h256('test') = '928b20366943e2afd11ebc0eae2e53a93bf177a4fcf35bcc64d503704e65e202'\", () => {\n    const hash = Hash.h256(Buffer.from(msg));\n    chai.assert.strictEqual(Buffer.from(hash.buffer).toString(\"hex\"), msgBlake2b);\n  });\n\n  it(\"h160('test') = '86e8402b7615f07a2acb2ef1f4a54d323bbede77'\", () => {\n    const hash = Hash.h160(Buffer.from(msg, \"UTF-8\"));\n    chai.assert.strictEqual(Buffer.from(hash.buffer).toString(\"hex\"), msgH160);\n  });\n});\n","import { Buffer } from \"buffer\";\nimport chai from \"chai\";\nimport Hash from \"./Hash\";\nimport Key from \"./Key\";\nimport nacl from \"./nacl\";\nimport Signature from \"./Signature\";\n\ndescribe(\"Key\", () => {\n  const TEST_ADDRESS = \"0680a919c78faa59b127014b6181979ae0a62dbd\";\n  const TEST_ENCODED_PRIVATEKEY = \"302e020100300506032b657004220420bd2f24b259aac4bfce3792c31d0f62a7f28b439c3e4feb97050efe5fe254f2af\";\n  const TEST_ENCODED_PUBLICKEY = \"302a300506032b6570032100b72dc8ebc9f53d21837dc96483da08765ea11f25c1bd4c3cb49318c944d67b9b\";\n  const TEST_SIG = \"e345ba4cbdc7dcca559d7b60a4740a750d565409481ffb6ee18e4d0c104bdd8d37457e383b1cd515e2f8e1a4a3ecbd771a29ef0520e4b017ca6e005881f07606b72dc8ebc9f53d21837dc96483da08765ea11f25c1bd4c3cb49318c944d67b9b\";\n\n  it(\"generates as key-pair\", () => {\n    const key = Key.generateKeyPair();\n    chai.assert.strictEqual(key.getPublicKey().length, Key.PUBLIC_KEY_LEN);\n    chai.assert.strictEqual(key.getEncodedPublicKey().length, Key.ENCODED_PUBLIC_KEY_LEN);\n    chai.assert.strictEqual(key.getPrivateKey().length, Key.PRIVATE_KEY_LEN);\n    chai.assert.strictEqual(key.getEncodedPrivateKey().length, Key.ENCODED_PRIVATE_KEY_LEN);\n    chai.assert.strictEqual(key.toAddressBytes().length, Key.ADDRESS_LEN);\n  });\n\n  it(\"decodes & encodes a key-pair in PKCS8/X.509\", () => {\n    const key = Key.importEncodedPrivateKey(Buffer.from(TEST_ENCODED_PRIVATEKEY, \"hex\"));\n    const privKey = key.getEncodedPrivateKey();\n    const pubKey = key.getEncodedPublicKey();\n    chai.assert.strictEqual(Buffer.from(privKey.buffer, 0, privKey.length).toString(\"hex\"), TEST_ENCODED_PRIVATEKEY);\n    chai.assert.strictEqual(Buffer.from(pubKey.buffer, 0, pubKey.length).toString(\"hex\"), TEST_ENCODED_PUBLICKEY);\n    chai.assert.strictEqual(key.toAddressHexString(), TEST_ADDRESS);\n\n    const key2 = Key.importEncodedPrivateKey(key.getEncodedPrivateKey());\n    chai.assert.deepEqual(key2.getEncodedPrivateKey(), key.getEncodedPrivateKey());\n    chai.assert.deepEqual(key2.getSeed(), key.getSeed());\n    chai.assert.deepEqual(key2.getPrivateKey(), key.getPrivateKey());\n    chai.assert.deepEqual(key2.getPublicKey(), key.getPublicKey());\n    chai.assert.deepEqual(key2.toAddressBytes(), key.toAddressBytes());\n    chai.assert.strictEqual(key2.toAddressHexString(), key.toAddressHexString());\n  });\n\n  it(\"signs & verifies a message\", () => {\n    const key = Key.generateKeyPair();\n    const message = Hash.h256(Buffer.from(\"test\"));\n    const sig = key.sign(message);\n\n    chai.assert.strictEqual(sig.toBytes().length, Signature.LENGTH);\n    chai.assert.isOk(Key.verify(message, sig));\n    chai.assert.deepEqual(sig.getPublicKey(), key.getPublicKey());\n    chai.assert.deepEqual(sig.getAddress(), key.toAddressBytes());\n  });\n\n  it(\"signs & verifies large data\", () => {\n    const data = nacl.randomBytes(1024 * 1024);\n    const key = Key.generateKeyPair();\n    const sig = key.sign(data);\n\n    chai.assert.isOk(Key.verify(data, sig));\n    chai.assert.deepEqual(sig.getPublicKey(), key.getPublicKey());\n  });\n\n  it(\"does not verify invalid signatures\", () => {\n    const data = Buffer.from(\"test\");\n    const hash = Hash.h256(data);\n\n    chai.assert.isOk(!Key.verify(hash, Signature.fromBytes(nacl.randomBytes(Signature.LENGTH))));\n  });\n\n  it(\"verifies encoded signatures\", () => {\n    const key = Key.importEncodedPrivateKey(Buffer.from(TEST_ENCODED_PRIVATEKEY, \"hex\"));\n    const sig = Signature.fromBytes(Buffer.from(TEST_SIG, \"hex\"));\n\n    chai.assert.deepEqual(sig.getPublicKey(), key.getPublicKey());\n    chai.assert.deepEqual(sig.getSignedMsg(), key.sign(Buffer.from(\"test\")).getSignedMsg());\n    chai.assert.deepEqual(sig.getAddress(), key.toAddressBytes());\n    chai.assert.deepEqual(sig.toBytes(), Buffer.from(TEST_SIG, \"hex\"));\n  });\n});\n","import { Buffer } from \"buffer\";\nimport chai from \"chai\";\nimport Long from \"long\";\nimport SimpleDecoder from \"./SimpleDecoder\";\n\ndescribe(\"SimpleDecoder\", () => {\n\n  it(\"decodes a multi-typed data structure encoded by SimpleEncoder\", () => {\n    const BYTES = Buffer.from(\"017f7fff7fffffff7fffffffffffffff1478c1470c829951a7a65b4f3f7043d40ec38319f10474657374008080008000000080000000000000000000\", \"hex\");\n    const d = new SimpleDecoder(BYTES, 0, BYTES.length);\n    chai.assert.strictEqual(d.readBoolean(), true);\n    chai.assert.strictEqual(d.readByte(), 127);\n    chai.assert.strictEqual(d.readShort(), 32767);\n    chai.assert.strictEqual(d.readInt(), 2147483647);\n    chai.assert.isOk(d.readLong().eq(Long.fromString(\"0x7fffffffffffffff\", false, 16)));\n    chai.assert.deepEqual(d.readBytes(), new Uint8Array(Buffer.from(\"78c1470c829951a7a65b4f3f7043d40ec38319f1\", \"hex\")));\n    chai.assert.strictEqual(d.readString(), \"test\");\n    chai.assert.strictEqual(d.readBoolean(), false);\n    chai.assert.strictEqual(d.readByte(), -128);\n    chai.assert.strictEqual(d.readShort(), -32768);\n    chai.assert.strictEqual(d.readInt(), -2147483648);\n    chai.assert.isOk(d.readLong().eq(Long.fromString(\"0x8000000000000000\", false, 16)));\n    chai.assert.deepEqual(d.readBytes(), new Uint8Array(0));\n    chai.assert.strictEqual(d.readString(), \"\");\n    chai.assert.throws(() => d.readByte());\n  });\n\n  it(\"decodes sizes of byte arrays\", () => {\n    const SIZES = new Int32Array([0x00, 0x7F, 0x80, 0x2000, 0x3FFF, 0x4000, 0x1FFFFF, 0x200000, 0x08000000, 0x0fffffff]);\n    const BYTES_SIZES = Buffer.from(\"007F8100C000FF7F818000FFFF7F81808000C0808000FFFFFF7F\", \"hex\");\n\n    const decoder = new SimpleDecoder(BYTES_SIZES, 0, BYTES_SIZES.length);\n    for (let i : number = 0;i < SIZES.length;i++) {\n      chai.assert.deepEqual(decoder.readSize(), SIZES[i]);\n    }\n    chai.assert.strictEqual(decoder.getReadIndex(), BYTES_SIZES.length);\n  });\n});\n","import { Buffer } from \"buffer\";\nimport chai from \"chai\";\nimport Long from \"long\";\nimport SimpleEncoder from \"./SimpleEncoder\";\n\ndescribe(\"SimpleEncoder\", () => {\n\n  it(\"encodes a boolean\", () => {\n    const encoder = new SimpleEncoder();\n    encoder.writeBoolean(true);\n    chai.assert.deepEqual(encoder.toBytes(), Uint8Array.of(1));\n    encoder.writeBoolean(false);\n    chai.assert.deepEqual(encoder.toBytes(), Uint8Array.of(1, 0));\n  });\n\n  it(\"encodes a byte\", () => {\n    const encoder = new SimpleEncoder();\n    for (let i = -128; i <= 127; i++) {\n      encoder.writeByte(i);\n    }\n    chai.assert.deepEqual(encoder.toBytes(), Buffer.from(\"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f\", \"hex\"));\n  });\n\n  it(\"encodes a 16-bit integer\", () => {\n    const tests = {\n      \"0000\": 0,\n      \"258e\": 9614,\n      \"7fff\": 32767,\n      \"8000\": -32768,\n      \"a66d\": -22931,\n    };\n\n    for (const bytes in tests) {\n      const encoder = new SimpleEncoder();\n      encoder.writeShort(tests[bytes]);\n      chai.assert.deepEqual(encoder.toBytes(), Buffer.from(bytes, \"hex\"));\n      chai.assert.strictEqual(encoder.toBytes().length, 2);\n    }\n  });\n\n  it(\"encodes a 32-bit integer\", () => {\n    const tests = {\n      \"00000000\": 0,\n      \"7fffffff\": 2147483647,\n      \"80000000\": -2147483648,\n      \"4c29385f\": 1277769823,\n      \"b15c848c\": -1319336820,\n    };\n\n    for (const bytes in tests) {\n      const encoder = new SimpleEncoder();\n      encoder.writeInt(tests[bytes]);\n      chai.assert.deepEqual(encoder.toBytes(), Buffer.from(bytes, \"hex\"));\n      chai.assert.strictEqual(encoder.toBytes().length, 4);\n    }\n  });\n\n  it(\"encodes a 64-bit integer\", () => {\n    const tests = {\n      \"0000000000000000\": Long.fromString(\"0\", false, 10),\n      \"7fffffffffffffff\": Long.fromString(\"9223372036854775807\", false, 10),\n      \"8000000000000000\": Long.fromString(\"-9223372036854775808\", false, 10),\n      \"161b065167181c00\": Long.fromString(\"1592873839897353216\", false, 10),\n      \"b5ff50cb88001000\": Long.fromString(\"-5332454598693089280\", false, 10),\n    };\n\n    for (const hex in tests) {\n      const encoder = new SimpleEncoder();\n      encoder.writeLong(tests[hex]);\n      chai.assert.deepEqual(encoder.toBytes(), Buffer.from(hex, \"hex\"));\n      chai.assert.strictEqual(encoder.toBytes().length, 8);\n    }\n  });\n\n  it(\"encodes a byte array\", () => {\n    const tests = {\n      \"00\": [],\n      \"10999bd0a27aea7e6db940ba126d8ccf46\": [-103, -101, -48, -94, 122, -22, 126, 109, -71, 64, -70, 18, 109, -116, -49, 70],\n    };\n\n    for (const hex in tests) {\n      const encoder = new SimpleEncoder();\n      encoder.writeBytes(new Uint8Array(tests[hex]));\n      chai.assert.deepEqual(encoder.toBytes(), Buffer.from(hex, \"hex\"));\n    }\n  });\n\n  it(\"encodes a string\", () => {\n    const TEST_STRING = \"😀😁😂😃😄😅😆😉😢\";\n    const TEST_STRING_HEX = \"24f09f9880f09f9881f09f9882f09f9883f09f9884f09f9885f09f9886f09f9889f09f98a2\";\n\n    const encoder = new SimpleEncoder();\n    encoder.writeString(TEST_STRING);\n    chai.assert.deepEqual(encoder.toBytes(), Buffer.from(TEST_STRING_HEX, \"hex\"));\n  });\n\n  it(\"encoded a multi-typed data structure\", () => {\n    const BYTES_TX = Buffer.from(\"017f7fff7fffffff7fffffffffffffff1478c1470c829951a7a65b4f3f7043d40ec38319f10474657374008080008000000080000000000000000000\", \"hex\");\n\n    const e = new SimpleEncoder();\n    e.writeBoolean(true);\n    e.writeByte(127);\n    e.writeShort(32767);\n    e.writeInt(2147483647);\n    e.writeLong(Long.fromString(\"0x7fffffffffffffff\", false, 16));\n    e.writeBytes(Buffer.from(\"78c1470c829951a7a65b4f3f7043d40ec38319f1\", \"hex\"));\n    e.writeString(\"test\");\n    e.writeBoolean(false);\n    e.writeByte(-128);\n    e.writeShort(-32768);\n    e.writeInt(-2147483648);\n    e.writeLong(Long.fromString(\"0x8000000000000000\", false, 16));\n    e.writeBytes(new Uint8Array(0));\n    e.writeString(\"\");\n\n    chai.assert.deepEqual(e.toBytes(), BYTES_TX);\n  });\n\n  it(\"encodes sizes of byte arrays\", () => {\n    const SIZES = new Int32Array([0x00, 0x7F, 0x80, 0x2000, 0x3FFF, 0x4000, 0x1FFFFF, 0x200000, 0x08000000, 0x0fffffff]);\n    const SIZES_ENCODED = Buffer.from(\"007F8100C000FF7F818000FFFF7F81808000C0808000FFFFFF7F\", \"hex\");\n\n    const encoder = new SimpleEncoder();\n    for (let i : number = 0;i < SIZES.length;i++) {\n      encoder.writeSize(SIZES[i]);\n    }\n\n    chai.assert.deepEqual(encoder.toBytes(), SIZES_ENCODED);\n  });\n\n});\n","import { Buffer } from \"buffer\";\nimport chai from \"chai\";\nimport Long from \"long\";\nimport Key from \"./Key\";\nimport Network from \"./Network\";\nimport Transaction from \"./Transaction\";\nimport TransactionType from \"./TransactionType\";\n\ndescribe(\"Transaction\", () => {\n  function TEST_TX() {\n    return new Transaction(\n      TEST_V.network,\n      TEST_V.type,\n      TEST_V.to,\n      TEST_V.value,\n      TEST_V.fee,\n      TEST_V.nonce,\n      TEST_V.timestamp,\n      TEST_V.data,\n    );\n  }\n\n  const TEST_V : any = {};\n  TEST_V.network = Network.DEVNET;\n  TEST_V.type = TransactionType.TRANSFER;\n  TEST_V.to = Buffer.from(\"06f7e63b7556c4602b1e258172eb2abf2831c89f\", \"hex\");\n  TEST_V.value = Long.fromString(\"2\");\n  TEST_V.fee = Long.fromString(\"5000000\");\n  TEST_V.nonce = Long.fromString(\"1\");\n  TEST_V.timestamp = Long.fromString(\"1520489540520\");\n  TEST_V.data = Buffer.from(\"64617461\", \"hex\");\n  TEST_V.hash = Buffer.from(\"fad1a99bdc9e40393d9e7a962e15b9a5d5415f85d8b27eea2197b2bccb50f6c5\", \"hex\");\n  TEST_V.key = Key.importEncodedPrivateKey(Buffer.from(\"302e020100300506032b657004220420bd2f24b259aac4bfce3792c31d0f62a7f28b439c3e4feb97050efe5fe254f2af\", \"hex\"));\n  TEST_V.serialized = Buffer.from(\"20fad1a99bdc9e40393d9e7a962e15b9a5d5415f85d8b27eea2197b2bccb50f6c53c02011406f7e63b7556c4602b1e258172eb2abf2831c89f000000000000000200000000004c4b40000000000000000100000162043d2ba80464617461603a2948cbf99a5d833176139c9a66279389e8e8c71eec242826922e07e3c92882929afb82ce3048ec21310d5fe295e674587cd0197da6250542fc839a546d1b0db72dc8ebc9f53d21837dc96483da08765ea11f25c1bd4c3cb49318c944d67b9b\", \"hex\");\n  TEST_V.signature = Buffer.from(\"3a2948cbf99a5d833176139c9a66279389e8e8c71eec242826922e07e3c92882929afb82ce3048ec21310d5fe295e674587cd0197da6250542fc839a546d1b0db72dc8ebc9f53d21837dc96483da08765ea11f25c1bd4c3cb49318c944d67b9b\", \"hex\");\n\n  function assertTestTx(tx : Transaction) {\n    chai.assert.strictEqual(tx.getNetworkId(), TEST_V.network.getId());\n    chai.assert.strictEqual(tx.getType().getCode(), TEST_V.type.getCode());\n    chai.assert.deepEqual(tx.getTo(), TEST_V.to);\n    chai.assert.isOk(tx.getValue().eq(TEST_V.value));\n    chai.assert.isOk(tx.getFee().eq(TEST_V.fee));\n    chai.assert.isOk(tx.getNonce().eq(TEST_V.nonce));\n    chai.assert.isOk(tx.getTimestamp().eq(TEST_V.timestamp));\n    chai.assert.deepEqual(tx.getData(), TEST_V.data);\n    chai.assert.deepEqual(tx.getHash(), TEST_V.hash);\n  }\n\n  it(\"constructs a semux transaction and its hash\", () => {\n    const tx = TEST_TX();\n    assertTestTx(tx);\n    chai.assert.strictEqual(tx.getSignature(), undefined);\n  });\n\n  it(\"validates data and signature\", () => {\n    const tx = TEST_TX().sign(TEST_V.key);\n    chai.assert.strictEqual(tx.validate(TEST_V.network), null);\n  });\n\n  it(\"serializes in bytes\", () => {\n    const tx = TEST_TX().sign(TEST_V.key);\n    chai.assert.deepEqual(tx.toBytes(), TEST_V.serialized);\n  });\n\n  it(\"de-serializes a serialized transaction\", () => {\n    const tx = Transaction.fromBytes(TEST_V.serialized);\n    assertTestTx(tx);\n    chai.assert.deepEqual(tx.getSignature().getPublicKey(), TEST_V.key.getPublicKey());\n    chai.assert.deepEqual(tx.getSignature().toBytes(), TEST_V.signature);\n  });\n});\n"],"names":["chai","nacl","Long"],"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"}